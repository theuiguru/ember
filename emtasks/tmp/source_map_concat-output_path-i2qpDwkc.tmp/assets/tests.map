{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","emtasks/tests/app.lint-test.js","emtasks/tests/helpers/create-offline-ref.js","emtasks/tests/helpers/destroy-firebase-apps.js","emtasks/tests/helpers/replace-app-ref.js","emtasks/tests/helpers/replace-firebase-app-service.js","emtasks/tests/helpers/stub-firebase.js","emtasks/tests/helpers/unstub-firebase.js","emtasks/tests/test-helper.js","emtasks/tests/tests.lint-test.js","emtasks/tests/unit/controllers/tasks-test.js","emtasks/tests/unit/controllers/tasks/new-test.js","emtasks/tests/unit/models/task-test.js","emtasks/tests/unit/routes/tasks-test.js","emtasks/tests/unit/routes/tasks/new-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('emtasks/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/tasks.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tasks.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/tasks/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tasks/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/format-date.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/format-date.js should pass ESLint\\n\\n4:10 - \\'moment\\' is not defined. (no-undef)\\n4:17 - \\'params\\' is not defined. (no-undef)\\n7:16 - Use import { helper as buildHelper } from \\'@ember/component/helper\\'; instead of using Ember.Helper.helper (ember/new-module-imports)');\n  });\n\n  QUnit.test('models/task.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/task.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/tasks.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tasks.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/tasks/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tasks/new.js should pass ESLint\\n\\n');\n  });\n});","define('emtasks/tests/helpers/create-offline-ref', ['exports', 'firebase'], function (exports, _firebase) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = createOfflineRef;\n\n\n  /**\n   * Creates an offline firebase reference with optional initial data and url.\n   *\n   * Be sure to `stubfirebase()` and `unstubfirebase()` in your tests!\n   *\n   * @param  {!Object} [initialData]\n   * @param  {string} [url]\n   * @param  {string} [apiKey]\n   * @return {!firebase.database.Reference}\n   */\n  function createOfflineRef(initialData, url = 'https://emberfire-tests-2c814.firebaseio.com', apiKey = 'AIzaSyC9-ndBb1WR05rRF1msVQDV6EBqB752m6o') {\n\n    if (!_firebase.default._unStub) {\n      throw new Error('Please use stubFirebase() before calling this method');\n    }\n\n    const config = {\n      apiKey: apiKey,\n      authDomain: 'emberfire-tests-2c814.firebaseapp.com',\n      databaseURL: url,\n      storageBucket: ''\n    };\n\n    let app;\n\n    try {\n      app = _firebase.default.app();\n    } catch (e) {\n      app = _firebase.default.initializeApp(config);\n    }\n\n    const ref = app.database().ref();\n\n    app.database().goOffline(); // must be called after the ref is created\n\n    if (initialData) {\n      ref.set(initialData);\n    }\n\n    return ref;\n  }\n});","define('emtasks/tests/helpers/destroy-firebase-apps', ['exports', 'firebase'], function (exports, _firebase) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyFirebaseApps;\n\n\n  const { run } = Ember;\n\n  /**\n   * Destroy all Firebase apps.\n   */\n  function destroyFirebaseApps() {\n    const deletions = _firebase.default.apps.map(app => app.delete());\n    Ember.RSVP.all(deletions).then(() => run(() => {\n      // NOOP to delay run loop until the apps are destroyed\n    }));\n  }\n});","define('emtasks/tests/helpers/replace-app-ref', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = replaceAppRef;\n  /**\n   * Updates the supplied app adapter's Firebase reference.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!firebase.database.Reference} ref\n   * @param  {string} [model]  The model, if overriding a model specific adapter\n   */\n  function replaceAppRef(app, ref, model = 'application') {\n    app.register('service:firebaseMock', ref, { instantiate: false, singleton: true });\n    app.inject('adapter:firebase', 'firebase', 'service:firebaseMock');\n    app.inject('adapter:' + model, 'firebase', 'service:firebaseMock');\n  }\n});","define('emtasks/tests/helpers/replace-firebase-app-service', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = replaceFirebaseAppService;\n  /**\n   * Replaces the `firebaseApp` service with your own using injection overrides.\n   *\n   * This is usually not needed in test modules, where you can re-register over\n   * existing names in the registry, but in acceptance tests, some registry/inject\n   * magic is needed.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!Object} newService\n   */\n  function replaceFirebaseAppService(app, newService) {\n    app.register('service:firebaseAppMock', newService, { instantiate: false, singleton: true });\n    app.inject('torii-provider:firebase', 'firebaseApp', 'service:firebaseAppMock');\n    app.inject('torii-adapter:firebase', 'firebaseApp', 'service:firebaseAppMock');\n  }\n});","define('emtasks/tests/helpers/stub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = stubFirebase;\n\n\n  /**\n   * When a reference is in offline mode it will not call any callbacks\n   * until it goes online and resyncs. The ref will have already\n   * updated its internal cache with the changed values so we shortcut\n   * the process and call the supplied callbacks immediately (asynchronously).\n   */\n  function stubFirebase() {\n    // check for existing stubbing\n    if (!_firebase.default._unStub) {\n      var originalSet = _firebase.default.database.Reference.prototype.set;\n      var originalUpdate = _firebase.default.database.Reference.prototype.update;\n      var originalRemove = _firebase.default.database.Reference.prototype.remove;\n\n      _firebase.default._unStub = function () {\n        _firebase.default.database.Reference.prototype.set = originalSet;\n        _firebase.default.database.Reference.prototype.update = originalUpdate;\n        _firebase.default.database.Reference.prototype.remove = originalRemove;\n      };\n\n      _firebase.default.database.Reference.prototype.set = function (data, cb) {\n        originalSet.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase.default.database.Reference.prototype.update = function (data, cb) {\n        originalUpdate.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase.default.database.Reference.prototype.remove = function (cb) {\n        originalRemove.call(this);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n    }\n  }\n});","define('emtasks/tests/helpers/unstub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = unstubFirebase;\n  function unstubFirebase() {\n    if (typeof _firebase.default._unStub === 'function') {\n      _firebase.default._unStub();\n      delete _firebase.default._unStub;\n    }\n  }\n});","define('emtasks/tests/test-helper', ['emtasks/app', 'emtasks/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('emtasks/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/tasks-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/tasks-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/tasks/new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/tasks/new-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/task-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/task-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/tasks-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/tasks-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/tasks/new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/tasks/new-test.js should pass ESLint\\n\\n');\n  });\n});","define('emtasks/tests/unit/controllers/tasks-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | tasks', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:tasks');\n      assert.ok(controller);\n    });\n  });\n});","define('emtasks/tests/unit/controllers/tasks/new-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | tasks/new', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:tasks/new');\n      assert.ok(controller);\n    });\n  });\n});","define('emtasks/tests/unit/models/task-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | task', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('task', {});\n      assert.ok(model);\n    });\n  });\n});","define('emtasks/tests/unit/routes/tasks-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | tasks', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      assert.ok(route);\n    });\n  });\n});","define('emtasks/tests/unit/routes/tasks/new-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | tasks/new', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:tasks/new');\n      assert.ok(route);\n    });\n  });\n});","define('emtasks/config/environment', [], function() {\n  var prefix = 'emtasks';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('emtasks/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}